name: Build

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '*.md'
      - 'LICENSE*'
  pull_request:

env:
  CARGO_BIN_NAME: retrotool retrotool-gui
  CARGO_TARGET_DIR: target
  UBUNTU_PACKAGES: libx11-dev libasound2-dev libudev-dev

jobs:
  check:
    name: Check
    runs-on: ubuntu-22.04
    env:
      RUSTFLAGS: -D warnings
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get -y install $UBUNTU_PACKAGES
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - name: Cargo check
        run: cargo check
      - name: Cargo clippy
        run: cargo clippy

  deny:
    name: Deny
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources
      fail-fast: false
    continue-on-error: ${{ matrix.checks == 'advisories' }}
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check ${{ matrix.checks }}

  test:
    name: Test
    strategy:
      matrix:
        platform: [ubuntu-22.04, windows-2022, macos-12]
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get -y update
          sudo apt-get -y install $UBUNTU_PACKAGES
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
      - name: Cargo test
        run: cargo test --release

  build-cli:
    name: Build (CLI)
    env:
      CARGO_BIN_NAME: retrotool
    strategy:
      matrix:
        include:
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-musl
            name: linux-x86_64
            build: zigbuild
          - platform: ubuntu-22.04
            target: i686-unknown-linux-musl
            name: linux-x86
            build: zigbuild
          - platform: ubuntu-22.04
            target: aarch64-unknown-linux-musl
            name: linux-aarch64
            build: zigbuild
          - platform: ubuntu-22.04
            target: armv7-unknown-linux-musleabi
            name: linux-armv7l
            build: zigbuild
          - platform: windows-2022
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            build: build
          - platform: windows-2022
            target: aarch64-pc-windows-msvc
            name: windows-arm64
            build: build
          - platform: macos-12
            target: x86_64-apple-darwin
            name: macos-x86_64
            build: build
          - platform: macos-12
            target: aarch64-apple-darwin
            name: macos-arm64
            build: build
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install cargo-zigbuild
        if: matrix.build == 'zigbuild'
        run: pip install cargo-zigbuild
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      - name: Cargo build
        run: cargo ${{ matrix.build }} --release --target ${{ matrix.target }} --bin ${{ env.CARGO_BIN_NAME }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CARGO_BIN_NAME }}-${{ matrix.name }}
          path: |
            ${{ env.CARGO_TARGET_DIR }}/${{ matrix.target }}/release/${{ env.CARGO_BIN_NAME }}*
          if-no-files-found: error

  build:
    name: Build (GUI)
    env:
      CARGO_BIN_NAME: retrotool-gui
    strategy:
      matrix:
        include:
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
            build: build
          - platform: windows-2022
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            build: build
          - platform: windows-2022
            target: aarch64-pc-windows-msvc
            name: windows-arm64
            build: build
          - platform: macos-12
            target: x86_64-apple-darwin
            name: macos-x86_64
            build: build
          - platform: macos-12
            target: aarch64-apple-darwin
            name: macos-arm64
            build: build
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get -y update
          sudo apt-get -y install $UBUNTU_PACKAGES
      - name: Install cargo-zigbuild
        if: matrix.build == 'zigbuild'
        run: pip install ziglang cargo-zigbuild
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      - name: Cargo build
        env:
          BEVY_ASSET_PATH: ${{ github.workspace }}/retrotool-gui/assets
        run: cargo ${{ matrix.build }} --release --target ${{ matrix.target }} --bin ${{ env.CARGO_BIN_NAME }} --features embed
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CARGO_BIN_NAME }}-${{ matrix.name }}
          path: |
            ${{ env.CARGO_TARGET_DIR }}/${{ matrix.target }}/release/${{ env.CARGO_BIN_NAME }}*
          if-no-files-found: error

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-22.04
    needs: [build]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Prepare release assets
        run: |
          mkdir release-assets
          find artifacts -type f -exec cp {} release-assets \;
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
